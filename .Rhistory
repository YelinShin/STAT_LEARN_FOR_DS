train_label = cbind(t(train_label), t(mnist$test$labels[which(mnist$test$labels == 5)[1:400]]))
train_label = t(train_label)
train = data.frame(train_label, train_image)
#make binary column
train$train_label = ifelse(train$train_label ==3,0,1)
test_image = mnist$test$images[which(mnist$test$labels == 3)[401:800],]
test_image = rbind(test_image, mnist$test$images[which(mnist$test$labels == 5)[401:800],])
test_label = mnist$test$labels[which(mnist$test$labels == 3)[401:800]]
test_label = cbind(t(test_label), t(mnist$test$labels[which(mnist$test$labels == 5)[401:800]]))
test_label = t(test_label)
test = data.frame(test_label, test_image)
#make binary column
test$test_label = ifelse(test$test_label ==3,0,1)
dim(train)
dim(test)
logitMod <- glm(train_label ~ ., data=train, family=binomial)
train_pred <- predict(logitMod, train, type="response")  # predicted scores
train_pred = ifelse(train_pred>0.5,1,0)
print("Mis-classification rate in train set:")
mean(train_pred!= train$train_label)
View(train_label)
options(warn = -1)
library(dplyr)
library(tidyr)
#library(tidyverse)
library(GGally)
library(plotly)
library(cowplot)
library(ggcorrplot)
library(stringr)
drops <- c('title', 'tags', 'crawl_month', 'theme', 'product_id', 'product_picture', 'product_url', 'merchant_id', 'merchant_profile_picture', 'merchant_info_subtitle', 'merchant_name', 'merchant_title', 'urgency_text', 'title_orig', 'shipping_option_name', 'currency_buyer')
wish <- wish[, !(names(wish) %in% drops)]
wish <- wish %>% mutate(has_urgency_banner = ifelse(is.na(has_urgency_banner), 0, has_urgency_banner))
wish <- read.csv('summer-products-with-rating-and-performance_2020-08.csv')
drops <- c('title', 'tags', 'crawl_month', 'theme', 'product_id', 'product_picture', 'product_url', 'merchant_id', 'merchant_profile_picture', 'merchant_info_subtitle', 'merchant_name', 'merchant_title', 'urgency_text', 'title_orig', 'shipping_option_name', 'currency_buyer')
wish <- wish[, !(names(wish) %in% drops)]
summary(wish)
wish <- read.csv('summer-products-with-rating-and-performance_2020-08.csv')
drops <- c('title', 'tags', 'crawl_month', 'theme', 'product_id', 'product_picture', 'product_url', 'merchant_id', 'merchant_profile_picture', 'merchant_info_subtitle', 'merchant_name', 'merchant_title', 'urgency_text', 'title_orig', 'shipping_option_name', 'currency_buyer')
wish <- wish[, !(names(wish) %in% drops)]
summary(wish)
wish <- wish %>% mutate(has_urgency_banner = ifelse(is.na(has_urgency_banner), 0, has_urgency_banner))
wish$has_urgency_banner <- as.integer(wish$has_urgency_banner)
wish <- wish %>%
mutate(product_variation_size_id = tolower(product_variation_size_id)) %>%
mutate(product_variation_size_id = gsub(pattern = '.', replacement = '',
x = product_variation_size_id, fixed = TRUE)) %>%
mutate(product_variation_size_id = gsub(pattern = '(size-*)|(size)', replacement = '',
x = product_variation_size_id)) %>%
mutate(product_variation_size_id = gsub(pattern = '.+[-]', replacement = '',
x = product_variation_size_id)) %>%
mutate(product_variation_size_id = ifelse(grepl(pattern = 'xl',product_variation_size_id),
'xl', product_variation_size_id)) %>%
mutate(product_variation_size_id = ifelse(grepl(pattern = 'xs', product_variation_size_id),
'xs', product_variation_size_id)) %>%
mutate(product_variation_size_id = str_replace(product_variation_size_id, ' ', '')) %>%
mutate(product_variation_size_id = ifelse(product_variation_size_id %in% c('s', 'xs', 'm', 'l', 'xl'),
product_variation_size_id, 'One-sized'))
unique(wish['product_variation_size_id'])
wish <- wish %>%
mutate(product_color = tolower(product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'red|burgundy|claret|wine|jasper', product_color),
'red', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'blue|navy', product_color),
'blue', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'white', product_color),
'white', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'green|army', product_color),
'green', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'black', product_color),
'black', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'yellow|leopard|gold', product_color),
'yellow', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'pink|rose', product_color),
'pink', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'grey|gray|silver', product_color),
'gray', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'purple|violet', product_color),
'purple', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'orange|apricot', product_color),
'orange', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'beige|nude|ivory|coffee|brown|khaki|camel',
product_color), 'khaki', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'floral|multicolor|camouflage|rainbow|star',
product_color), 'multicolor', product_color))
wish['product_color'][wish['product_color'] == ''] <- 'Not defined'
wish['origin_country'][wish['origin_country'] == ''] <- 'Not defined'
wish$rating_five_count[which(is.na(wish$rating_five_count))] <- 0
wish$rating_four_count[which(is.na(wish$rating_four_count))] <- 0
wish$rating_three_count[which(is.na(wish$rating_three_count))] <- 0
wish$rating_two_count[which(is.na(wish$rating_two_count))] <- 0
wish$rating_one_count[which(is.na(wish$rating_one_count))] <- 0
wish$rating[which(wish$rating_count == 0)] <- 0
# check for the number of unique values for each column
# looks fine - we are good for the next steps
ulst <- lapply(wish, unique)
lengths(ulst)
str(wish)
wish %>%
group_by(uses_ad_boosts) %>%
summarise(no_rows = length(uses_ad_boosts)) %>%
arrange(desc(no_rows))
wish %>%
group_by(badges_count) %>%
summarise(no_rows = length(badges_count)) %>%
arrange(desc(no_rows))
wish %>%
group_by(badge_local_product) %>%
summarise(no_rows = length(badge_local_product)) %>%
arrange(desc(no_rows))
wish %>%
group_by(badge_product_quality) %>%
summarise(no_rows = length(badge_product_quality)) %>%
arrange(desc(no_rows))
wish %>%
group_by(badge_fast_shipping) %>%
summarise(no_rows = length(badge_fast_shipping)) %>%
arrange(desc(no_rows))
wish %>%
group_by(product_color) %>%
summarise(no_rows = length(product_color)) %>%
arrange(desc(no_rows))
wish %>%
group_by(product_variation_size_id) %>%
summarise(no_rows = length(product_variation_size_id)) %>%
arrange(desc(no_rows))
wish %>%
group_by(shipping_is_express) %>%
summarise(no_rows = length(shipping_is_express)) %>%
arrange(desc(no_rows))
wish %>%
group_by(has_urgency_banner) %>%
summarise(no_rows = length(has_urgency_banner)) %>%
arrange(desc(no_rows))
wish %>%
group_by(origin_country) %>%
summarise(no_rows = length(origin_country)) %>%
arrange(desc(no_rows))
wish %>%
group_by(merchant_has_profile_picture) %>%
summarise(no_rows = length(merchant_has_profile_picture)) %>%
arrange(desc(no_rows))
wish <- select(wish, -c(shipping_is_express))
color_list <- c('black', 'white', 'blue', 'red', 'green', 'yellow', 'pink')
wish$product_color[!(wish$product_color %in% color_list)] <- 'others'
wish %>%
group_by(product_color) %>%
summarise(no_rows = length(product_color)) %>%
arrange(desc(no_rows)) %>%
filter(no_rows > 100)
wish$origin_country <- as.character(wish$origin_country)
wish$origin_country[which(wish$origin_country != 'CN')] <- 'others'
wish$origin_country[is.na(wish$origin_country)] <- 'others'
wish %>%
group_by(origin_country) %>%
summarise(no_rows = length(origin_country)) %>%
arrange(desc(no_rows))
str(wish)
origin_colname <- colnames(wish)
colnames(wish) <- c('price', 'retail', 'sold_ct', 'ad_boost', 'rate', 'rate_ct', 'rate5', 'rate4', 'rate3', 'rate2', 'rate1', 'badge_ct', 'bg_local', 'bg_quality', 'bg_fastship', 'color', 'size', 'inventory', 'ship_price', 'able_country', 'total_invent', 'has_bg_urgency', 'origin', 'seller_rate_ct', 'seller_rate', 'has_seller_propic')
1573*0.80
set.seed(1)
train_index = sample(nrow(wish), 1258) #around 80% of obs
train = wish[train_index, ]
test = wish[-train_index, ]
head(train)
as.factor(wish['sold_ct'])
table(wish['sold_ct'])
whish$sold_ct_cate = wish$sold_ct
wish$sold_ct_cate = wish$sold_ct
wish
View(wish)
table(wish['sold_ct']) # very unbalaned
wish$sold_ct_cate = wish$sold_ct
wish$sold_ct_cate[which(wish$sold_ct <=50)] <- 'below 50'
wish$sold_ct_cate[iwhich(wish$sold_ct >=50000)] <- 'above 50K'
wish$sold_ct_cate[which(wish$sold_ct >=50000)] <- 'above 50K'
table(wish$sold_ct_cate) # very unbalaned
table(wish['sold_ct']) # very unbalaned
wish$sold_ct_cate = wish$sold_ct
wish$sold_ct_cate[which(wish$sold_ct <=50)] <- 'below 50'
wish$sold_ct_cate[which(wish$sold_ct >=20000)] <- 'above 20K'
table(wish$sold_ct_cate) # much better
wish <- read.csv('summer-products-with-rating-and-performance_2020-08.csv')
drops <- c('title', 'tags', 'crawl_month', 'theme', 'product_id', 'product_picture', 'product_url', 'merchant_id', 'merchant_profile_picture', 'merchant_info_subtitle', 'merchant_name', 'merchant_title', 'urgency_text', 'title_orig', 'shipping_option_name', 'currency_buyer')
wish <- wish[, !(names(wish) %in% drops)]
summary(wish)
wish <- wish %>% mutate(has_urgency_banner = ifelse(is.na(has_urgency_banner), 0, has_urgency_banner))
wish$has_urgency_banner <- as.integer(wish$has_urgency_banner)
wish <- wish %>%
mutate(product_variation_size_id = tolower(product_variation_size_id)) %>%
mutate(product_variation_size_id = gsub(pattern = '.', replacement = '',
x = product_variation_size_id, fixed = TRUE)) %>%
mutate(product_variation_size_id = gsub(pattern = '(size-*)|(size)', replacement = '',
x = product_variation_size_id)) %>%
mutate(product_variation_size_id = gsub(pattern = '.+[-]', replacement = '',
x = product_variation_size_id)) %>%
mutate(product_variation_size_id = ifelse(grepl(pattern = 'xl',product_variation_size_id),
'xl', product_variation_size_id)) %>%
mutate(product_variation_size_id = ifelse(grepl(pattern = 'xs', product_variation_size_id),
'xs', product_variation_size_id)) %>%
mutate(product_variation_size_id = str_replace(product_variation_size_id, ' ', '')) %>%
mutate(product_variation_size_id = ifelse(product_variation_size_id %in% c('s', 'xs', 'm', 'l', 'xl'),
product_variation_size_id, 'One-sized'))
wish <- wish %>% mutate(has_urgency_banner = ifelse(is.na(has_urgency_banner), 0, has_urgency_banner))
wish$has_urgency_banner <- as.integer(wish$has_urgency_banner)
#3. clean the sizes
wish <- wish %>%
mutate(product_variation_size_id = tolower(product_variation_size_id)) %>%
mutate(product_variation_size_id = gsub(pattern = '.', replacement = '',
x = product_variation_size_id, fixed = TRUE)) %>%
mutate(product_variation_size_id = gsub(pattern = '(size-*)|(size)', replacement = '',
x = product_variation_size_id)) %>%
mutate(product_variation_size_id = gsub(pattern = '.+[-]', replacement = '',
x = product_variation_size_id)) %>%
mutate(product_variation_size_id = ifelse(grepl(pattern = 'xl',product_variation_size_id),
'xl', product_variation_size_id)) %>%
mutate(product_variation_size_id = ifelse(grepl(pattern = 'xs', product_variation_size_id),
'xs', product_variation_size_id)) %>%
mutate(product_variation_size_id = str_replace(product_variation_size_id, ' ', '')) %>%
mutate(product_variation_size_id = ifelse(product_variation_size_id %in% c('s', 'xs', 'm', 'l', 'xl'),
product_variation_size_id, 'One-sized'))
print(unique(wish['product_variation_size_id']))
#fix color
wish <- wish %>%
mutate(product_color = tolower(product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'red|burgundy|claret|wine|jasper', product_color),
'red', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'blue|navy', product_color),
'blue', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'white', product_color),
'white', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'green|army', product_color),
'green', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'black', product_color),
'black', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'yellow|leopard|gold', product_color),
'yellow', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'pink|rose', product_color),
'pink', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'grey|gray|silver', product_color),
'gray', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'purple|violet', product_color),
'purple', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'orange|apricot', product_color),
'orange', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'beige|nude|ivory|coffee|brown|khaki|camel',
product_color), 'khaki', product_color)) %>%
mutate(product_color = ifelse(grepl(pattern = 'floral|multicolor|camouflage|rainbow|star',
product_color), 'multicolor', product_color))
wish['product_color'][wish['product_color'] == ''] <- 'Not defined'
wish['origin_country'][wish['origin_country'] == ''] <- 'Not defined'
# handle NA
wish$rating_five_count[which(is.na(wish$rating_five_count))] <- 0
wish$rating_four_count[which(is.na(wish$rating_four_count))] <- 0
wish$rating_three_count[which(is.na(wish$rating_three_count))] <- 0
wish$rating_two_count[which(is.na(wish$rating_two_count))] <- 0
wish$rating_one_count[which(is.na(wish$rating_one_count))] <- 0
wish$rating[which(wish$rating_count == 0)] <- 0
# check for the number of unique values for each column
# looks fine - we are good for the next steps
ulst <- lapply(wish, unique)
lengths(ulst)
#7. factors
str(wish)
wish %>%
group_by(uses_ad_boosts) %>%
summarise(no_rows = length(uses_ad_boosts)) %>%
arrange(desc(no_rows))
wish %>%
group_by(badges_count) %>%
summarise(no_rows = length(badges_count)) %>%
arrange(desc(no_rows))
wish %>%
group_by(badge_local_product) %>%
summarise(no_rows = length(badge_local_product)) %>%
arrange(desc(no_rows))
wish %>%
group_by(badge_product_quality) %>%
summarise(no_rows = length(badge_product_quality)) %>%
arrange(desc(no_rows))
wish %>%
group_by(badge_fast_shipping) %>%
summarise(no_rows = length(badge_fast_shipping)) %>%
arrange(desc(no_rows))
wish %>%
group_by(product_color) %>%
summarise(no_rows = length(product_color)) %>%
arrange(desc(no_rows))
wish %>%
group_by(product_variation_size_id) %>%
summarise(no_rows = length(product_variation_size_id)) %>%
arrange(desc(no_rows))
wish %>%
group_by(shipping_is_express) %>%
summarise(no_rows = length(shipping_is_express)) %>%
arrange(desc(no_rows))
wish %>%
group_by(has_urgency_banner) %>%
summarise(no_rows = length(has_urgency_banner)) %>%
arrange(desc(no_rows))
wish %>%
group_by(origin_country) %>%
summarise(no_rows = length(origin_country)) %>%
arrange(desc(no_rows))
wish %>%
group_by(merchant_has_profile_picture) %>%
summarise(no_rows = length(merchant_has_profile_picture)) %>%
arrange(desc(no_rows))
#shipping_is_express has too many zero, so we decided to exclude this column. Also, product_color and origin_country might cause an error in prediction, so we need to change some record.
wish <- select(wish, -c(shipping_is_express))
#Only 7 colors have more than 100 records so We decided to keep only 8 factors of color, i.e. black, white, blue, red, green, yellow, pink and others.
color_list <- c('black', 'white', 'blue', 'red', 'green', 'yellow', 'pink')
wish$product_color[!(wish$product_color %in% color_list)] <- 'others'
wish %>%
group_by(product_color) %>%
summarise(no_rows = length(product_color)) %>%
arrange(desc(no_rows)) %>%
filter(no_rows > 100)
#We decided to change origin to CN and others.
wish$origin_country <- as.character(wish$origin_country)
wish$origin_country[which(wish$origin_country != 'CN')] <- 'others'
wish$origin_country[is.na(wish$origin_country)] <- 'others'
wish %>%
group_by(origin_country) %>%
summarise(no_rows = length(origin_country)) %>%
arrange(desc(no_rows))
str(wish)
#change columns' name
```{r}
set.seed(1)
table(wish['sold_ct']) # very unbalaned
origin_colname <- colnames(wish)
colnames(wish) <- c('price', 'retail', 'sold_ct', 'ad_boost', 'rate', 'rate_ct', 'rate5', 'rate4', 'rate3', 'rate2', 'rate1', 'badge_ct', 'bg_local', 'bg_quality', 'bg_fastship', 'color', 'size', 'inventory', 'ship_price', 'able_country', 'total_invent', 'has_bg_urgency', 'origin', 'seller_rate_ct', 'seller_rate', 'has_seller_propic')
table(wish['sold_ct']) # very unbalaned
wish_cate = wish
wish_cate$sold_ct_cate = wish_cate$sold_ct
wish_cate$sold_ct_cate[which(wish_cate$sold_ct <=50)] <- 'below 50'
wish_cate$sold_ct_cate[which(wish_cate$sold_ct >=20000)] <- 'above 20K'
table(wish_cate$sold_ct_cate) # much better
wish_cate = wish
wish_cate$sold_ct_cate = wish_cate$sold_ct
wish_cate$sold_ct_cate[which(wish_cate$sold_ct <=50)] <- 'below 50'
wish_cate$sold_ct_cate[which(wish_cate$sold_ct >=20000)] <- 'above 20K'
drops <- c("sold_ct")
wish_cate[ , !(names(wish_cate) %in% drops)]
table(wish_cate$sold_ct_cate) # much better
View(wish_cate)
select(wish_cate, -sold_ct)
a=select(wish_cate, -sold_ct)
wish_cate = wish
wish_cate$sold_ct_cate = wish_cate$sold_ct
wish_cate$sold_ct_cate[which(wish_cate$sold_ct <=50)] <- 'below 50'
wish_cate$sold_ct_cate[which(wish_cate$sold_ct >=20000)] <- 'above 20K'
wish_cate = select(wish_cate, -sold_ct)
table(wish_cate$sold_ct_cate) # much better
set.seed(1)
table(wish['sold_ct']) # very unbalaned
wish_cate = wish
wish_cate$sold_ct_cate = wish_cate$sold_ct
wish_cate$sold_ct_cate[which(wish_cate$sold_ct <=50)] <- 'below 50'
wish_cate$sold_ct_cate[which(wish_cate$sold_ct >=20000)] <- 'above 20K'
wish_cate = select(wish_cate, -sold_ct)
table(wish_cate$sold_ct_cate) # much better
train_index = sample(nrow(wish_cate), 1258) #around 80% of obs
train = wish_cate[train_index, ]
test = wish_cate[-train_index, ]
library(e1071)
set.seed(120)
tuned = tune(svm, wish_cate ~ ., data = train, kernel = "linear", ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
library(e1071)
set.seed(120)
tuned = tune(svm, sold_ct_cate ~ ., data = train, kernel = "linear", ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
train
library(ISLR)
set.seed(1)
train_index = sample(nrow(OJ), 800)
train = OJ[train_index, ]
test = OJ[-train_index, ]
head(train)
library(e1071)
set.seed(120)
svm.b = svm(Purchase ~ ., kernel = "linear", data = train, cost = 0.01)
summary(svm.b)
table(wish['sold_ct']) # very unbalaned
wish_cate = wish
wish_cate$sold_ct_cate = wish_cate$sold_ct
wish_cate$sold_ct_cate[which(wish_cate$sold_ct <=50)] <- 'below 50'
wish_cate$sold_ct_cate[which(wish_cate$sold_ct >=20000)] <- 'above 20K'
wish_cate = select(wish_cate, -sold_ct)
table(wish_cate$sold_ct_cate) # much better
train_index = sample(nrow(wish_cate), 1258) #around 80% of obs
wish.train = wish_cate[train_index, ]
wish.test = wish_cate[-train_index, ]
set.seed(120)
svm.b = svm(sold_ct_cate ~ ., kernel = "linear", data = wish.train, cost = 0.01)
str(wish_cate)
table(wish['sold_ct']) # very unbalaned
wish_cate = wish
wish_cate$sold_ct_cate = wish_cate$sold_ct
wish_cate$sold_ct_cate[which(wish_cate$sold_ct <=50)] <- 'below 50'
wish_cate$sold_ct_cate[which(wish_cate$sold_ct >=20000)] <- 'above 20K'
wish_cate = select(wish_cate, -sold_ct)
wish_cate$sold_ct_cate = as.factor(wish_cate$sold_ct_cate)
table(wish_cate$sold_ct_cate) # much better
train_index = sample(nrow(wish_cate), 1258) #around 80% of obs
wish.train = wish_cate[train_index, ]
wish.test = wish_cate[-train_index, ]
library(e1071)
str(wish_cate)
set.seed(120)
svm.b = svm(sold_ct_cate ~ ., kernel = "linear", data = wish.train, cost = 0.01)
summary(svm.b)
tuned = tune(svm, sold_ct_cate ~ ., data = train, kernel = "linear", ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
tuned = tune(svm, sold_ct_cate ~ ., data = wish.train, kernel = "linear", ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
set.seed(120)
tuned = tune(svm, sold_ct_cate ~ ., data = wish.train, kernel = "linear", ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
summary(tuned)
lin.svm = svm(sold_ct_cate ~ ., kernel = "linear", data = wish.train, cost = 8.51)
train_pred = predict(lin.svm, wish.train)
table =table(wish.train$sold_ct_cate, train_pred)
print("training error with cost = 8.51: ")
(table[2]+table[3]) /(sum(table[1:4]))
test_pred = predict(lin.svm, wish.test)
table =table(test$Purchase, test_pred)
lin.svm = svm(sold_ct_cate ~ ., kernel = "linear", data = wish.train, cost = 8.51)
train_pred = predict(lin.svm, wish.train)
table =table(wish.train$sold_ct_cate, train_pred)
print("training error with cost = 8.51: ")
(table[2]+table[3]) /(sum(table[1:4]))
test_pred = predict(lin.svm, wish.test)
table =table(wish.test$sold_ct_cate, test_pred)
print("training error with cost = 8.51: ")
(table[2]+table[3]) /(sum(table[1:4]))
set.seed(143)
tuned = tune(svm, sold_ct_cate ~ ., data = wish.train, kernel = "radial", ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
summary(tuned) #cost = 8.51 is best
plot(lin.svm, wish.test)
lin.svm = svm(sold_ct_cate ~ ., kernel = "linear",type="C-class", data = wish.train, cost = 8.51)
plot(lin.svm, wish.test)
lin.svm
lin.svm = svm(sold_ct_cate ~ ., kernel = "linear",type="C-class", data = wish.train, cost = 8.51)
train_pred = predict(lin.svm, wish.train)
table =table(wish.train$sold_ct_cate, train_pred)
print("training error with cost = 8.51: ")
(table[2]+table[3]) /(sum(table[1:4]))
test_pred = predict(lin.svm, wish.test)
table =table(wish.test$sold_ct_cate, test_pred)
print("training error with cost = 8.51: ")
(table[2]+table[3]) /(sum(table[1:4]))
plot(lin.svm, wish.test)
plot(lin.svm, wish.test$sold_ct_cate)
plot(train_pred, wish.test$sold_ct_cate)
plot(test_pred, wish.test$sold_ct_cate)
plot(lin.svm, wish.test$sold_ct_cate)
plot(lin.svm, wish.test,sold_ct_cate~rate)
plot(lin.svm, wish.test,rate~sold_ct_cate)
lin.svm = svm(sold_ct_cate ~ ., kernel = "linear",type="C-class", data = wish.train, cost = 8.51)
train_pred = predict(lin.svm, wish.train)
table =table(wish.train$sold_ct_cate, train_pred)
print("training error with cost = 8.51: ")
(table[2]+table[3]) /(sum(table[1:4]))
test_pred = predict(lin.svm, wish.test)
table =table(wish.test$sold_ct_cate, test_pred)
print("training error with cost = 8.51: ")
(table[2]+table[3]) /(sum(table[1:4]))
rad.svm = svm(sold_ct_cate ~ ., kernel = "radial", data = wish.train, cost = 10)
train_pred = predict(rad.svm, wish.train)
table =table(wish.train$sold_ct_cate, train_pred)
print("radical svm - training error with cost = 10: ")
(table[2]+table[3]) /(sum(table[1:4]))
test_pred = predict(rad.svm, wish.test)
table =table(wish.test$sold_ct_cate, test_pred)
print("radical svm - training error with cost = 10: ")
(table[2]+table[3]) /(sum(table[1:4]))
set.seed(550)
tuned.g = tune(svm, sold_ct_cate ~ ., data = wish.train, kernel = "poly", degree = 2, ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
tuned.g = tune(svm, sold_ct_cate ~ ., data = wish.train, kernel = "poly", degree = 2, ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
ctr <- trainControl(method='repeatedcv',
number=10,
repeats=3)
install.packages("caret")
install.packages("xgboost")
xtab <- table(wish.test$sold_ct_cate,test_pred)
xtab
rad.svm = svm(sold_ct_cate ~ ., kernel = "radial", data = wish.train, cost = 10)
train_pred = predict(rad.svm, wish.train)
table =table(wish.train$sold_ct_cate, train_pred)
print("radical svm - training error with cost = 10: ")
(table[2]+table[3]) /(sum(table[1:4]))
test_pred = predict(rad.svm, wish.test)
table =table(wish.test$sold_ct_cate, test_pred)
print("radical svm - training error with cost = 10: ")
(table[2]+table[3]) /(sum(table[1:4]))
table(wish.test$sold_ct_cate,test_pred)
set.seed(1)
table(wish['sold_ct']) # very unbalaned
wish_cate = wish
wish_cate$sold_ct_cate = wish_cate$sold_ct
wish_cate$sold_ct_cate[which(wish_cate$sold_ct <=50)] <- 'below 50'
wish_cate$sold_ct_cate[which(wish_cate$sold_ct >=20000)] <- 'above 20K'
wish_cate = select(wish_cate, -sold_ct)
wish_cate$sold_ct_cate = as.factor(wish_cate$sold_ct_cate)
table(wish_cate$sold_ct_cate) # much better
set.seed(123)
train_index = sample(nrow(wish_cate), 1258) #around 80% of obs
wish.train = wish_cate[train_index, ]
wish.test = wish_cate[-train_index, ]
library(e1071)
set.seed(120)
tuned = tune(svm, sold_ct_cate ~ ., data = wish.train, kernel = "linear", ranges =list(cost = append(seq(0.01,10,by=0.5),10)))
summary(tuned) #cost = 8.51 is best
